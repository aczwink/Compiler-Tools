//----------------------------
//----------------------------
//------- Assignments --------
//----------------------------
//----------------------------

ALPHABET EToken;
STARTSYMBOL START;


//----------------------------
//----------------------------
//--------- C Enums ----------
//----------------------------
//----------------------------

enum EToken
{
	TOKEN_ILLEGAL,
	TOKEN_END,
	TOKEN_WHITESPACE,
	TOKEN_LINEFEED,
	TOKEN_SINGLELINECOMMENT,
	TOKEN_MULTILINECOMMENT,
	TOKEN_INTNUMBER,
	TOKEN_FLOATNUMBER,
	TOKEN_LITERAL,
	TOKEN_ASSIGNMENT,
	TOKEN_DOT,
	TOKEN_COMMA,
	TOKEN_DIVIDE,
	TOKEN_DIVIDEASSIGN,
	TOKEN_EQUALS,
	TOKEN_GREATEROREQUAL,
	TOKEN_GREATERTHAN,
	TOKEN_LESSOREQUAL,
	TOKEN_LESSTHAN,
	TOKEN_LOGICALAND,
	TOKEN_LOGICALOR,
	TOKEN_MINUS,
	TOKEN_MINUSASSIGN,
	TOKEN_MINUSMINUS,
	TOKEN_MODULO,
	TOKEN_MULTIPLY,
	TOKEN_MULTIPLYASSIGN,
	TOKEN_NOT,
	TOKEN_NOTEQUALS,
	TOKEN_PLUS,
	TOKEN_PLUSASSIGN,
	TOKEN_PLUSPLUS,
	TOKEN_PARENCLOSE,
	TOKEN_PARENOPEN,
	TOKEN_SQUAREDBRACKET_CLOSE,
	TOKEN_SQUAREDBRACKET_OPEN,
	TOKEN_BRACECLOSE,
	TOKEN_BRACEOPEN,
	TOKEN_SEMICOLON,
	TOKEN_DOUBLEDOT,
	TOKEN_MAP,
	TOKEN_IDENTIFIER,
	TOKEN_KEYWORD_BREAK,
	TOKEN_KEYWORD_CONTINUE,
	TOKEN_KEYWORD_FUNCTION,
	TOKEN_KEYWORD_FOR,
	TOKEN_KEYWORD_FOREACH,
	TOKEN_KEYWORD_IF,
	TOKEN_KEYWORD_ELSE,
	TOKEN_KEYWORD_RETURN,
	TOKEN_KEYWORD_WHILE,
};

//----------------------------
//----------------------------
//-- Lexer Production Rules --
//----------------------------
//----------------------------

'[ \t\r\f]+' -> TOKEN_WHITESPACE;

'\n' -> TOKEN_LINEFEED;

'//[^\r\n]*' -> TOKEN_SINGLELINECOMMENT;
'/\*.*?\*/' -> TOKEN_MULTILINECOMMENT;

'[0-9]+' -> TOKEN_INTNUMBER;
'(0|([1-9][0-9]*))\.[0-9]+' -> TOKEN_FLOATNUMBER;
'"[^"]*"' -> TOKEN_LITERAL;

//Operators:
'=' -> TOKEN_ASSIGNMENT;
'\.' -> TOKEN_DOT;
',' -> TOKEN_COMMA;
'/' -> TOKEN_DIVIDE;
'/=' -> TOKEN_DIVIDEASSIGN;
'==' -> TOKEN_EQUALS;
'>=' -> TOKEN_GREATEROREQUAL;
'>' -> TOKEN_GREATERTHAN;
'<=' -> TOKEN_LESSOREQUAL;
'<' -> TOKEN_LESSTHAN;
'&&' -> TOKEN_LOGICALAND;
'\|\|' -> TOKEN_LOGICALOR;
'\-' -> TOKEN_MINUS;
'\-=' -> TOKEN_MINUSASSIGN;
'\-\-' -> TOKEN_MINUSMINUS;
'%' -> TOKEN_MODULO;
'\*' -> TOKEN_MULTIPLY;
'\*=' -> TOKEN_MULTIPLYASSIGN;
'!' -> TOKEN_NOT;
'!=' -> TOKEN_NOTEQUALS;
'\)' -> TOKEN_PARENCLOSE;
'\(' -> TOKEN_PARENOPEN;
'\]' -> TOKEN_SQUAREDBRACKET_CLOSE;
'\[' -> TOKEN_SQUAREDBRACKET_OPEN;
'\+' -> TOKEN_PLUS;
'\+=' -> TOKEN_PLUSASSIGN;
'\+\+' -> TOKEN_PLUSPLUS;
'}' -> TOKEN_BRACECLOSE;
'{' -> TOKEN_BRACEOPEN;
';' -> TOKEN_SEMICOLON;
':' -> TOKEN_DOUBLEDOT;
'=>' -> TOKEN_MAP;

//Keywords:
'break' -> TOKEN_KEYWORD_BREAK;
'continue' -> TOKEN_KEYWORD_CONTINUE;
'function' -> TOKEN_KEYWORD_FUNCTION;
'for' -> TOKEN_KEYWORD_FOR;
'foreach' -> TOKEN_KEYWORD_FOREACH;
'if' -> TOKEN_KEYWORD_IF;
'else' -> TOKEN_KEYWORD_ELSE;
'return' -> TOKEN_KEYWORD_RETURN;
'while' -> TOKEN_KEYWORD_WHILE;

//Less Priority than keywords
'[a-zA-Z_][a-zA-Z0-9_]*' -> TOKEN_IDENTIFIER;


//---------------------------
//---------------------------
//--- Operator Precedence ---
//---------------------------
//---------------------------

OPPREC
LEFT TOKEN_LOGICALOR;
LEFT TOKEN_LOGICALAND;
LEFT TOKEN_EQUALS TOKEN_NOTEQUALS;
LEFT TOKEN_LESSTHAN TOKEN_LESSOREQUAL TOKEN_GREATERTHAN TOKEN_GREATEROREQUAL;
LEFT TOKEN_PLUS TOKEN_MINUS;
LEFT TOKEN_MULTIPLY TOKEN_DIVIDE TOKEN_MODULO;
LEFT #UNARY;
LEFT TOKEN_PLUSPLUS TOKEN_MINUSMINUS;
;


//---------------------------------
//---------------------------------
//---- Parser Production Rules ----
//---------------------------------
//---------------------------------

START -> STATEMENTS;

STATEMENTS -> ;
STATEMENTS -> STATEMENT STATEMENTS;

STATEMENT -> ASSIGN TOKEN_SEMICOLON;
STATEMENT -> CALL TOKEN_SEMICOLON;
STATEMENT -> TOKEN_KEYWORD_IF TOKEN_PARENOPEN EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE ELSEIFS;
STATEMENT -> TOKEN_KEYWORD_WHILE TOKEN_PARENOPEN EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
STATEMENT -> TOKEN_KEYWORD_FOR TOKEN_PARENOPEN FORINIT TOKEN_SEMICOLON EXPR TOKEN_SEMICOLON EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
STATEMENT -> TOKEN_KEYWORD_FOREACH TOKEN_PARENOPEN TOKEN_IDENTIFIER TOKEN_DOUBLEDOT EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
STATEMENT -> TOKEN_KEYWORD_FOREACH TOKEN_PARENOPEN TOKEN_IDENTIFIER TOKEN_MAP TOKEN_IDENTIFIER TOKEN_DOUBLEDOT EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
STATEMENT -> TOKEN_KEYWORD_RETURN TOKEN_SEMICOLON;
STATEMENT -> TOKEN_KEYWORD_RETURN EXPR TOKEN_SEMICOLON;
STATEMENT -> TOKEN_KEYWORD_BREAK TOKEN_SEMICOLON;
STATEMENT -> TOKEN_KEYWORD_CONTINUE TOKEN_SEMICOLON;
STATEMENT -> LEFTVALUE TOKEN_PLUSPLUS TOKEN_SEMICOLON;
STATEMENT -> LEFTVALUE TOKEN_MINUSMINUS TOKEN_SEMICOLON;

ASSIGN -> LEFTVALUE TOKEN_ASSIGNMENT EXPR;
ASSIGN -> LEFTVALUE TOKEN_PLUSASSIGN EXPR;
ASSIGN -> LEFTVALUE TOKEN_MINUSASSIGN EXPR;
ASSIGN -> LEFTVALUE TOKEN_MULTIPLYASSIGN EXPR;
ASSIGN -> LEFTVALUE TOKEN_DIVIDEASSIGN EXPR;

LEFTVALUE -> CHAIN;

EXPR -> LEFTVALUE;
EXPR -> LEFTVALUE TOKEN_PLUSPLUS;
EXPR -> LEFTVALUE TOKEN_MINUSMINUS;
EXPR -> CALL;
EXPR -> CONSTVALUE;
EXPR #UNARY -> TOKEN_NOT EXPR;
EXPR #UNARY -> TOKEN_MINUS EXPR;
EXPR -> TOKEN_PARENOPEN EXPR TOKEN_PARENCLOSE;

EXPR -> EXPR TOKEN_PLUS EXPR;
EXPR -> EXPR TOKEN_MINUS EXPR;
EXPR -> EXPR TOKEN_MULTIPLY EXPR;
EXPR -> EXPR TOKEN_DIVIDE EXPR;
EXPR -> EXPR TOKEN_MODULO EXPR;

EXPR -> EXPR TOKEN_EQUALS EXPR;
EXPR -> EXPR TOKEN_NOTEQUALS EXPR;
EXPR -> EXPR TOKEN_LESSTHAN EXPR;
EXPR -> EXPR TOKEN_LESSOREQUAL EXPR;
EXPR -> EXPR TOKEN_GREATERTHAN EXPR;
EXPR -> EXPR TOKEN_GREATEROREQUAL EXPR;
EXPR -> EXPR TOKEN_LOGICALAND EXPR;
EXPR -> EXPR TOKEN_LOGICALOR EXPR;

CHAIN -> TOKEN_IDENTIFIER SELECTS;
CHAIN -> TOKEN_IDENTIFIER SELECTS TOKEN_DOT CHAIN;

CALL -> CHAIN TOKEN_PARENOPEN TOKEN_PARENCLOSE;
CALL -> CHAIN TOKEN_PARENOPEN CALLARGS TOKEN_PARENCLOSE;
CALLARGS -> EXPR;
CALLARGS -> EXPR TOKEN_COMMA CALLARGS;

CONSTVALUE -> TOKEN_FLOATNUMBER;
CONSTVALUE -> TOKEN_INTNUMBER;
CONSTVALUE -> TOKEN_LITERAL;
CONSTVALUE -> FUNCTION;
CONSTVALUE -> TOKEN_BRACEOPEN OBJENTRIES TOKEN_BRACECLOSE;
CONSTVALUE -> TOKEN_SQUAREDBRACKET_OPEN ARRAYENTRIES TOKEN_SQUAREDBRACKET_CLOSE;

FUNCTION -> TOKEN_KEYWORD_FUNCTION TOKEN_PARENOPEN TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
FUNCTION -> TOKEN_KEYWORD_FUNCTION TOKEN_PARENOPEN ARGS TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;

ARGS -> TOKEN_IDENTIFIER;
ARGS -> TOKEN_IDENTIFIER TOKEN_COMMA ARGS;

FORINIT -> ;
FORINIT -> ASSIGN;

OBJENTRIES -> ;
OBJENTRIES -> TOKEN_IDENTIFIER TOKEN_MAP EXPR;
OBJENTRIES -> TOKEN_IDENTIFIER TOKEN_MAP EXPR TOKEN_COMMA OBJENTRIES;

ARRAYENTRIES -> ;
ARRAYENTRIES -> EXPR;
ARRAYENTRIES -> EXPR TOKEN_COMMA ARRAYENTRIES;

ELSEIFS -> ;
ELSEIFS -> TOKEN_KEYWORD_ELSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE;
ELSEIFS -> TOKEN_KEYWORD_ELSE TOKEN_KEYWORD_IF TOKEN_PARENOPEN EXPR TOKEN_PARENCLOSE TOKEN_BRACEOPEN STATEMENTS TOKEN_BRACECLOSE ELSEIFS;

SELECTS -> ;
SELECTS -> TOKEN_SQUAREDBRACKET_OPEN EXPR TOKEN_SQUAREDBRACKET_CLOSE SELECTS;